name: Build Android APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v3

    - name: üß™ Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: üß∞ Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: üì¶ Install Dependencies
      run: |
        pip install beautifulsoup4 lxml
        npm install -g cordova

    - name: üõ† Install Android SDK via sdkmanager
      env:
        ANDROID_SDK_ROOT: /usr/local/android-sdk
      run: |
        mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
        cd "$ANDROID_SDK_ROOT/cmdline-tools"
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-*.zip
        rm commandlinetools-linux-*.zip
        mv cmdline-tools latest

        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH

        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"

    - name: üîé Load Build Variables
      id: vars
      run: |
        echo "APP_NAME=$(python -c 'from build import APP_NAME; print(APP_NAME)')" >> $GITHUB_OUTPUT
        echo "PACKAGE_NAME=$(python -c 'from build import PACKAGE_NAME; print(PACKAGE_NAME)')" >> $GITHUB_OUTPUT
        echo "VERSION_CODE=$(python -c 'from build import VERSION_CODE; print(VERSION_CODE)')" >> $GITHUB_OUTPUT
        echo "VERSION_NAME=$(python -c 'from build import VERSION_NAME; print(VERSION_NAME)')" >> $GITHUB_OUTPUT
        echo "ICON_PATH=$(python -c 'from build import ICON_PATH; print(ICON_PATH)')" >> $GITHUB_OUTPUT
        echo "WEB_ASSETS_PATH=$(python -c 'from build import WEB_ASSETS_PATH; print(WEB_ASSETS_PATH)')" >> $GITHUB_OUTPUT

    - name: üìÇ Create Cordova Project
      run: |
        cordova create cordova_project ${{ steps.vars.outputs.PACKAGE_NAME }} "${{ steps.vars.outputs.APP_NAME }}"
        cd cordova_project
        cordova platform add android@12
        cp -r ../${{ steps.vars.outputs.WEB_ASSETS_PATH }}/* www/
        mkdir -p res/icon/android
        cp ../${{ steps.vars.outputs.ICON_PATH }} res/icon/android/icon-512x512.png

    - name: ‚öôÔ∏è Create `local.properties`
      run: |
        echo "sdk.dir=$ANDROID_SDK_ROOT" > cordova_project/platforms/android/local.properties
      env:
        ANDROID_SDK_ROOT: /usr/local/android-sdk

    - name: üîß Update Cordova Config
      run: python update_config.py
      env:
        VERSION_NAME: ${{ steps.vars.outputs.VERSION_NAME }}
        VERSION_CODE: ${{ steps.vars.outputs.VERSION_CODE }}

    - name: üß± Build Unsigned APK
      run: cordova build android --release -- --unsigned
      working-directory: ./cordova_project

    - name: üîê Sign APK
      id: sign_apk
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: ${{ github.workspace }}/cordova_project/platforms/android/app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY_BASE64 }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}

    - name: üì§ Upload Signed APK
      uses: actions/upload-artifact@v4
      with:
        name: eruda-browser-apk
        path: ${{ steps.sign_apk.outputs.signedReleaseFile }}
